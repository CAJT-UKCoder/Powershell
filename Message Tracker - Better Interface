#  *** THIS SCRIPT IS PROVIDED WITHOUT WARRANTY ***
#
# Author: Carl Taylor
#
# This script will query specific mailboxes on the server name you tick. It returns 
# the the mailbox for sent/received mails and tracks whether the message left the system.
#
$ErrorActionPreference = "SilentlyContinue"
#Loading Assemblies
#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
#endregion Import Assemblies

#Here we create all objects form my the form
#region Generated Form Objects

$Form 		= New-Object System.Windows.Forms.Form
$buttonRun 	= New-Object System.Windows.Forms.Button
$buttonExp 	= New-Object System.Windows.Forms.Button
$buttonExit = New-Object System.Windows.Forms.Button
$btnslctall = New-Object System.Windows.Forms.Button
$btnunSlct  = New-Object System.Windows.Forms.Button
$DropDown 	= New-Object System.Windows.Forms.CheckedListBox
$txtSender  = New-Object System.Windows.Forms.TextBox
$txtSubject = New-Object System.Windows.Forms.TextBox
$txtRecip   = New-Object System.Windows.Forms.TextBox
$txtpath    = New-Object System.Windows.Forms.TextBox
$lblSend   	= New-Object System.Windows.Forms.CheckBox
$lblRecip   = New-Object System.Windows.Forms.CheckBox
$lblSubj   	= New-Object System.Windows.Forms.CheckBox
$lbl3   	= New-Object System.Windows.Forms.Label
$lbl4   	= New-Object System.Windows.Forms.Label
$TimeStart 	= New-Object System.Windows.Forms.DateTimePicker
$TimeEnd 	= New-Object System.Windows.Forms.DateTimePicker
$lblstart  	= New-Object System.Windows.Forms.Label
$lblend   	= New-Object System.Windows.Forms.Label
$Grid   	= New-Object System.Windows.Forms.DataGrid
$Array      = New-Object System.Collections.ArrayList 

#endregion Generated Form Objects

#region Control properties
#----------------------------------------------
#Tabindexis
$buttonRun.TabIndex = 12
$buttonExit.TabIndex =  13
$btnslctall.TabIndex = 1
$btnunSlct.TabIndex  = 2
$DropDown.TabIndex = 3
$txtSender.TabIndex  = 5
$txtSubject.TabIndex = 9
$txtRecip.TabIndex   = 7
$lblSend.TabIndex = 4
$lblRecip.TabIndex = 6
$lblSubj.TabIndex = 8
$lbl3.TabIndex = 15
$lbl4.TabIndex = 16
$TimeStart.TabIndex = 10
$TimeEnd.TabIndex = 11
$lblstart.TabIndex = 14
$lblend.TabIndex = 15
$Grid.TabIndex =16
$buttonExp.Tabindex = 17
$txtpath.Tabindex = 18

$Form.text = "Friendly Message Tracker"
$form.ClientSize = '1250, 480'
$Form.MaximizeBox = $false

$buttonRun.text = "Run"
$buttonExit.text = "Exit"
$buttonExp.text = "Export"

$buttonExp.Location = '500, 410'
$buttonRun.Location = '10, 330'
$buttonExit.Location = '135, 330'
$DropDown.location = '10, 35'
$txtpath.location = '220, 412'

$txtSender.Location = '10, 145'
$txtRecip.Location = '10, 185'
$txtSubject.Location = '10, 225'

$lblSend.location = '10, 125'
$lblRecip.location = '10, 165'
$lblSubj.location = '10, 205'

$lbl3.location = '10, 245'
$lbl4.location = '10, 285'
$lblstart.location = '80, 245'
$lblend.location = '80, 285'
$TimeStart.location = '10, 260'
$TimeEnd.location = '10, 300'
$Grid.location = '220,10'


$btnunSlct.location = '135,10'
$btnslctall.location = '10,10'


$lbl3.Width = '70'
$lbl4.Width = '70'
$lblSubj.Width = '120'
$lblstart.Width = '130'
$lblend.Width = '130'
$DropDown.Width = '200'
$DropDown.Height = '80'
$txtSender.Width = '200'
$txtRecip.Width = '200'
$txtSubject.Width = '200'
$txtpath.Width = "280"
$Grid.width = '1000'
$Grid.height = '400'



$lblSend.text = "Sender"
$lblRecip.text = "Recipient"
$lbl3.text = "Start Date and Time:"
$lbl4.text = "End Date and Time:"
$lblSubj.Text = "Message Subject"
$lblstart.text = "Select Date and Time"
$lblend.text = "Select Date and Time"


$btnunSlct.text = "UnSelect All"
$btnslctall.text = "Select All"
#$drp1.SelectedIndex = "0"

$txtSender.ReadOnly = $true
$txtRecip.ReadOnly = $true
$txtSubject.ReadOnly = $true
$Grid.ReadOnly = $true

$TimeStart.Format = "Custom"
$TimeEnd.Format = "Custom"
$TimeEnd.CustomFormat = "dd/MM/yyyy hh:mm:ss tt" 
$TimeStart.CustomFormat = "dd/MM/yyyy hh:mm:ss tt"
$DropDown.CheckOnClick = $true
$txtpath.Text = "$(Get-Location)\Log$(get-date -Format ddMMyy).csv"

#----------------------------------------------
#endregion control properies

#region Adding objects to Form
$form.controls.add($buttonRun)
$form.controls.add($buttonExit)
$Form.Controls.Add($DropDown)
$Form.Controls.Add($btnunSlct)
$Form.Controls.Add($btnslctall)
$Form.Controls.Add($txtRecip)
$Form.Controls.Add($txtSubject)
$Form.Controls.Add($txtSender)
$Form.Controls.Add($TimeEnd)
$Form.Controls.Add($Timestart)
$Form.Controls.Add($lblSend)
$Form.Controls.Add($lblRecip)
$Form.Controls.Add($lbl3)
$Form.Controls.Add($lbl4)
$Form.Controls.Add($lblSubj)
$Form.Controls.Add($lblstart)
$Form.Controls.Add($lblend)
$Form.Controls.Add($grid)
$Form.Controls.Add($buttonExp)
$Form.Controls.Add($txtpath)
#endregion Adding objects to Form

#region Import Modules and Check needed apps
#Modules are required otherwise information is not retrieveable

        If (Test-Path "HKLM:\SOFTWARE\Microsoft\Exchange\v8.0")
        {
        Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin -EA SilentlyContinue
		Get-TransportServer | select Name | %{[void]$DropDown.items.add(($_.Name.tostring())) }
        }
        ElseIf ((Test-Path "HKLM:\SOFTWARE\Microsoft\ExchangeServer\v14") -or (Test-Path "HKLM:\SOFTWARE\Microsoft\ExchangeServer\v15"))
        {
         Add-PSSnapin Microsoft.Exchange.Management.PowerShell.E2010 -EA SilentlyContinue
		 Get-TransportServer | select Name | %{[void]$DropDown.items.add(($_.Name.tostring())) }
		 }
        Else
        {}
#endregion Import Modules

#region Functions
Function runcmd($command)
{
$SelectedServer = @()
$SelectedServer += $DropDown.CheckedItems
$Data = @()

ForEach($item in $SelectedServer)
{

$tmp = @()
$strRecipients = "@{Name=" + [CHAR]34 + "Recipients" + [CHAR]34 + ";Expression={" +[CHAR]36 + [CHAR]95+ ".Recipients -join " + [CHAR]34+ ";" + [CHAR]34 + "}}"

$cmd = @"
$($command) -Server $($item) -Start "$($lblstart.Text)" -End "$($lblend.Text)" | select-object Timestamp,EventID,Sender,$($strRecipients),MessageSubject,clienthostname,ServerIP,ClientIP,connectorID,RecipientCount,ReturnPath
"@
$tmp += @(Invoke-Expression -Command $cmd)
If($tmp.count -gt 1)
{
$Data += $tmp
}

}
return $Data
}
#endregion

#region Control Events

$buttonRun.add_click(
{

$form.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
$Array.Clear()
$Grid.DataSource = $null
$Form.Refresh()


IF (($lblstart.Text -ne "Select Time" ) -and ($lblend.Text -ne "Select Time"))
{
[string]$strcmd = "get-messagetrackinglog "
if ($lblSend.Checked)
{$strcmd = $strcmd + "-Sender $($txtSender.text) "}
if ($lblRecip.Checked)
{$strcmd = $strcmd + "–Recipients $($txtRecip.text) "}
if ($lblSubj.Checked)
{$strcmd = $strcmd + "–MessageSubject " + [CHAR]34 + $($txtSubject.text) + [CHAR]34}
$ExportData = @(runcmd $strcmd)
$Array.AddRange($ExportData)
$Grid.DataSource = $Array
$Form.Refresh()
}
ELSE{
If ($lblstart.Text -eq "Select Time" )
{$lblstart.ForeColor = "Red"}
IF ($lblend.Text -eq "Select Time")
{$lblend.ForeColor = "Red"}
}
$form.Cursor = [System.Windows.Forms.Cursors]::Arrow
}

)

$buttonExit.add_click(
{$Form.close()})

$btnslctall.add_Click(
{$i = ($DropDown.Items.Count -1)
Do {$DropDown.SetItemChecked($i,$true);$i--}
While ($i -gt -1)
})

$btnunSlct.add_Click(
{$i = ($DropDown.Items.Count -1)
Do {$DropDown.SetItemChecked($i,$false);$i--}
While ($i -gt -1)
})

$TimeStart.add_ValueChanged(
{
$lblstart.ForeColor = "Black"
$lblstart.Text = @"
$($Timestart.value.Year)/$($Timestart.value.Month)/$($Timestart.value.Day) $($Timestart.value.TimeOfDay)
"@
}
)
$TimeEnd.add_ValueChanged(
{

$lblend.ForeColor = "Black"
$lblend.Text = @"
$($TimeEnd.value.Year)/$($TimeEnd.value.Month)/$($TimeEnd.value.Day) $($TimeEnd.value.TimeOfDay)
"@
}
)

$buttonExp.add_click(
{
$ExportData | Export-Csv $($txtpath.Text) -NoTypeInformation
}
)
#endregion

#region Checkboxevents

$lblRecip.add_CheckedChanged(
{IF ($lblRecip.Checked)
{$txtRecip.ReadOnly = $false}
Else
{$txtRecip.ReadOnly = $true}
}
)

$lblSend.add_CheckedChanged(
{IF ($lblSend.Checked)
{$txtSender.ReadOnly = $false}
Else
{$txtSender.ReadOnly = $true}
}
)

$lblSubj.add_CheckedChanged(
{IF ($lblSubj.Checked)
{$txtSubject.ReadOnly = $false}
Else
{$txtSubject.ReadOnly = $true}
}
)

#endregion
$Error | Set-Content .\Messagetrackererror.log
$form.ShowDialog()
